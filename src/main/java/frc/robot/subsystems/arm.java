package frc.robot.subsystems;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.IntakeHead;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkPIDController;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkBase.IdleMode;

public class arm extends SubsystemBase {
    //102 position
    
private CANSparkMax arm;
private SparkPIDController m_armPID;
private RelativeEncoder m_armEncoder;
public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxRPM, maxVel, minVel, maxAcc, allowedErr;
public double home, amp, pickup;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
 public arm(){

        
        arm = new CANSparkMax(IntakeHead.arm, MotorType.kBrushless);
        arm.setInverted(false);
        arm.setIdleMode(IdleMode.kBrake);

    m_armPID = arm.getPIDController();
    m_armEncoder = arm.getEncoder();

  // PID coefficients
  kP = 5e-5; 
  kI = 1e-6;
  kD = 0.0005; 
  kIz = 0; 
  kFF = 0.002; 
  kMaxOutput = 1; 
  kMinOutput = -1;
  maxRPM = 5700;
  maxVel = 700;
  maxAcc = 700;

  // set PID coefficients
  m_armPID.setP(kP);
  m_armPID.setI(kI);
  m_armPID.setD(kD);
  m_armPID.setIZone(kIz);
  m_armPID.setFF(kFF);
  m_armPID.setOutputRange(kMinOutput, kMaxOutput);

  int smartMotionSlot = 0;
  m_armPID.setSmartMotionMaxVelocity(maxVel, smartMotionSlot);
  m_armPID.setSmartMotionMinOutputVelocity(minVel, smartMotionSlot);
  m_armPID.setSmartMotionMaxAccel(maxAcc, smartMotionSlot);
  m_armPID.setSmartMotionAllowedClosedLoopError(allowedErr, smartMotionSlot);
  arm.getEncoder().setPosition(0);

  home=0.0;
  amp=-30.0;//-33
  pickup=105.0;//119



    }

    @Override
    public void periodic() {
      //System.out.println("Counts Per Rev "+arm.getEncoder().getCountsPerRevolution());
      System.out.println("Encoder Position "+arm.getEncoder().getPosition());
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void mymotorrun(double speed){
        
        arm.set(speed);
    }


    public void setReference(double setPoint) {
      m_armPID.setReference(setPoint, CANSparkMax.ControlType.kSmartMotion);
    }

    public void home(){
      m_armPID.setReference(home,CANSparkMax.ControlType.kSmartMotion);
    }

    public void amp(){
      m_armPID.setReference(amp,CANSparkMax.ControlType.kSmartMotion);
    }

    public void pickup(){
      m_armPID.setReference(pickup,CANSparkMax.ControlType.kSmartMotion);
    }
}
